#!/bin/bash

set -e
# See the README

if ! tail -1 /usr/local/bin/wp-setup.sh | grep -q 'exec "$@"'
then
   echo "ERROR: expected wp-setup.sh to end with a call to it's argument."
   exit 1
fi

# Copy wp-setup.sh but strip off the last line
head -n-1 /usr/local/bin/wp-setup.sh > /tmp/wp-setup.sh
chmod u+x /tmp/wp-setup.sh

if [ "$(ls -A /var/www/html)" ]
then
   echo "This is the first run for this site. Will do initial setup."
   DO_SETUP=1
else
   DO_SETUP=0
fi

echo "Sourcing wp-setup.sh"
# And run it. Note that we _source_ it so that environment variable changes it
# makes are still active here. This does things like set the apache env vars so
# they do proper priviledge deescalation prior to starting.
. /tmp/wp-setup.sh apache2-foreground


if [[ $DO_SETUP -eq 1 ]]
then
   if ! [[ -e wp-config.php ]]
   then
      echo "ERROR: wp-config.php not found. That is usually generated by the wp-setup.sh script"
      echo "    UNLESS some required environment variables were missing. Make sure you provided"
      echo "    WORDPRESS_DB_HOST, WORDPRESS_DB_USER, and WORDPRESS_DB_PASSWORD"
      eixt 1
   fi

   echo "Setting up WordPress"
   # TODO: I'm not sure if we want to do this or not.
   sudo -u www-data -- php /usr/local/bin/wp-cli.phar core install --url=$SITE_URL \
      --admin_user=$WP_ADMIN_USER --admin_password="$WP_ADMIN_PASS" \
      --admin_email="$WP_ADMIN_EMAIL" --title="$WP_TITLE"
   echo "Done with base WordPress setup."

   # Now install some plugins
   echo "Installing wordfence"
   # Note we don't run as root or we could end up copying files and things we can't read or manage.
   sudo -u www-data -- php /usr/local/bin/wp-cli.phar plugin install wordfence --activate
   echo "Done installing wordfence."
fi

apache2-foreground
